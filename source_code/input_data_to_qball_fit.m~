function input_data_to_qball_fit
    % Loading 4d nifti data, bvals and bvecs
    nii = load_untouch_nii('dwmri.nii');
    bvals = dlmread('dwmri.bval');
    bvecs = dlmread('dwmri.bvec');
    mask = load_untouch_nii('mask.nii');
    mask = logical(mask.img);
    % Removing the b0 data from the loaded data. Q-ball does not deal with
    % the b0's
    req_4d_dwmri = nii.img(:,:,:,2:97);
    req_bvals = bvals(:,2:97);
    req_bvecs = bvecs(:,2:97);
    % Feeding cleaned data to qball fit
    
    % We can also provide a mask as an input as the last input parameter.
    % For now it has been left out.
    lmax = 6;
    lambda = 0.006;
    [sh_coeffs_vol, exitcode_vol] = qball.vol_fit(req_4d_dwmri,req_bvecs,req_bvals,lmax,lambda,mask);
    
    P0 = []; Laplac2 = [];
    for L=0:2:lmax
        for m=-L:L
            Pnm = legendre(L, 0); factor1 = Pnm(1);
            P0 = [P0; factor1];
            Laplac2 = [Laplac2; (L^2)*(L + 1)^2];
        end
    end
    L = diag(Laplac2);
    % Get spherical harmonic basis at req_bvecs
    [basis,~,~] = qball.lib.spherical_harmonics.construct_SH_basis(lmax,req_bvecs',2,'real');
    sh_dwi = zeros(size(req_4d_dwmri));
    for i = 1:size(req_4d_dwmri,1)
        for j = 1:size(req_4d_dwmri,2)
            for k = 1:size(req_4d_dwmri,3)
                if mask(i,j,k)
                    % Reconstruct signal with spherical harmonic coefficients using regularized fit                   
                    C = (basis'*basis + lambda*L)\basis'*squeeze(req_4d_dwmri(i,j,k,:));                  
                    
                    % Reconstruct signal
                    sh_signal = basis*C;
                    
                    % Store it
                    sh_dwi(i,j,k,:) = sh_signal;
                    
                    
                end
            end
        end
    end
end